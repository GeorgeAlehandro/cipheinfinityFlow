library(shiny)
library(shinydashboard)
library(shinyFiles)
library(rhandsontable)
header <- dashboardHeader(
  title="Ciphe infinityFlow",
  uiOutput("test"),
  dropdownMenuOutput("messageMenu")
)

sidebar <- dashboardSidebar(

  ##### TAGS HEAD #####
  tags$head(
    tags$style(
      ##For shiny notification popup design
      HTML(".shiny-notification {
             position:fixed;
             top: calc(50%);
             left: calc(50%);
             }
             "
      )
    ),
    tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
    HTML(
      "
          <script>
          var socket_timeout_interval
          var n = 0
          $(document).on('shiny:connected', function(event) {
          socket_timeout_interval = setInterval(function(){
          Shiny.onInputChange('count', n++)
          }, 150000)
          });
          $(document).on('shiny:disconnected', function(event) {
          clearInterval(socket_timeout_interval)
          });
          </script>
          "
    )
  ),
  shinyjs::useShinyjs(),
  
  ##### MENU ITEM ####
  sidebarMenu(id = "tabs",
              menuItem("Guide Tutorial", tabName = "guide", icon = icon("dashboard")),
              menuItem("Upload Data", icon = icon("folder-open"), tabName = "upload"),
              menuItem("Process by infinityFlow",icon=icon("digital-ocean"),tabName="process"),
              menuItem("View Plots",icon=icon("eye"),tabName = "view"),
              menuItem("Clustering",icon=icon("braille"),
                       menuSubItem("Run Clustering",icon=icon("braille"),tabName="clusters"),
                       menuSubItem("Clusters Analysis",icon=icon("braille"),tabName="clustersAnalysis")
              ),
              menuItem("BackGating",icon=icon("undo-alt"),tabName = "backgating"),
              # menuItem("OneSENSE",icon=icon("bolt"),tabName="onesens"),
              menuItem("Annotation",icon=icon("magic"),
                       menuSubItem("Manual",icon=icon("hand-spock"),tabName="manuannot"),
                       menuSubItem("Automatique",icon=icon("robot"),tabName="autoannot")
              ),
              conditionalPanel(
                condition = "output.fileUploaded",
                conditionalPanel(
                  condition = "output.bigFileUploaded",
                  column(12,actionButton("bigDDl","Download FCS")),tags$br(),tags$br(),
                  column(12,uiOutput("lnkBigDDl")),tags$br(),tags$br()
                ),
                conditionalPanel(
                  condition = "output.smallFileUploaded",
                  column(12,downloadButton("downloadData","Download FCS")),tags$br(),tags$br()
                ),
                column(12,verbatimTextOutput('ex_out'))
              )
  )
)

body <- dashboardBody(
  shinyjs::useShinyjs(),
  tabItems(
    ##### LIBRARY #####
    tabItem(tabName="library",
            box(title = "Library statues", width=12,collapsible = F,
            )
    ),
    ##### GUIDE TAB ####
    tabItem(tabName = "guide",
            shinydashboard::box(title="News in Ciphe infinityFlow", status="success", solidHeader = T,width=5,
                                shinydashboard::box(width=12,
                                                    tags$h4("infinityFlow Pipeline",style="font-style:'bold'"),
                                                    tags$p("Go to upload data to begin",style="font-size:16px")
                                ),
                                shinydashboard::box(width=12,
                                                    tags$h4("To do list"),
                                                    tags$p("Create one tab with label edit and keywords edit", style="font-size:16px;"),
                                                    tags$p("Change plot view of backgating with hypergate", style="font-size:16px;"),
                                                    tags$p("Add select annotation in View FCS tab",style="font-size:16px;")
                                )
            ),
            shinydashboard::box(title="Guide Line",status="success",solidHeader = T,width=7,
                                shinydashboard::box(title="Upload DATA", status = "primary",collapsed = T,  solidHeader = T, width=12,collapsible=TRUE,
                                                    tags$ul(
                                                      tags$p("Ce premier onglet vous permet de charger vos donn??es,il est obligatoire de passer par ce premiere onglet
            et de charg?? des fichier pour d??bloqu?? la possibilit?? d'utiliser les autres onglet et algorithme disponible dans
            la CIPHE-Box. VOus avez la possibilit?? d'entrer des donn??es diff??rentes maniere et de diff??rents formats"),
                                                      tags$li(tags$b("Upload FCS:"),"Vous pouvez uploader un ou plusieurs fichier FCS (3.0) il seront alors lue dans l'ordre d'uploade dans une liste"),
                                                      tags$li(tags$b("Upload CSV :"), "A la palce de FCS vous pouvez loader plusieurs CSV qui serons alors convertit en FCS (Attention ne m??langer pas FCS et CSV)"),
                                                      tags$li("FLowRepository : Vous pouvez charg?? des fichier FCS depuis un repertoire pr??sent sur FlowRepository. Cela est un peu plus long car il y a le temps de t??l??chargement a rpendre en copmpte et une connection internet est requise."),
                                                      tags$li("From Server : C'est en cours de developpement mais il seras possible d'entrer une addresse IP et un chemin pour permettre a l'outil de scanner les sous dossier pr??sent et proposer le chargement des FCS dans l'outil"),
                                                      tags$li("RData : En reflection, proposer un format de sauvegarde du travail en cours au format RData et en relecture en upload.")
                                                    )
                                ),
                                shinydashboard::box(title="Preprocess", status = "primary",collapsed = T,   solidHeader = T, width=12,collapsible=TRUE,
                                                    tags$ul(
                                                      tags$li("You can Compensate, Transform, Divide , Multiple, Center and download result under menu"),
                                                      tags$li("Its possible to explore your parameters witxh overview of each label for one file or each file for one label")
                                                    )
                                )
            )
    ),
    ##### UPLOAD TAB ####
    # Begins by the user setting up the number of plates to analyze then the
    # number of files input boxes would be equal to that
    tabItem(tabName = "upload",
            tabBox(id = "input",width=12,height = 400,
                   tabPanel(title="Upload plates data",
                            column(5,sliderInput("number_plates", "Number of plates for the experiment:",
                                                 min = 1, max = 3,
                                                 value = 2)),
              # Accept works only on google chrome? or all browser
              # However not working on shiny browser (normal thing) 
                            conditionalPanel(
                              condition = "input.number_plates == '1'",
                              column(5,
                                     shinyDirButton('file_destination_1_1', label = 'Select folder containing the FCS files', title = 'Please select a 
                       file', multiple = FALSE),
                                     verbatimTextOutput("filechosen_1_1"))),                
                            conditionalPanel(
                              condition = "input.number_plates == '2'",
                              column(5,
                                     shinyDirButton("file_destination_2_1", "Select folder containing the FCS files (1)" ,
                                                      "Please", multiple = FALSE),
                                     verbatimTextOutput("filechosen_2_1"),
                                     shinyDirButton("file_destination_2_2", "Select folder containing the FCS files (2)" ,
                                               "Please", multiple = FALSE),
                              verbatimTextOutput("filechosen_2_2"))),
                            
                            conditionalPanel(
                              condition = "input.number_plates == '3'",
                              column(5,
                                     shinyDirButton("file_destination_3_1", "Select folder containing the FCS files (1)" ,
                                                      "Please", multiple = FALSE),
                                     verbatimTextOutput("filechosen_3_1"),
                                     shinyDirButton("file_destination_3_2", "Select folder containing the FCS files (2)" ,
                                                      "Please", multiple = FALSE),
                                     verbatimTextOutput("filechosen_3_2"),
                                     shinyDirButton("file_destination_3_3", "Select folder containing the FCS files (3)" ,
                                               "Please", multiple = FALSE),
                              verbatimTextOutput("filechosen_3_3"))),
              #Creating the refresh button
                            column(2,actionButton("refresh_input","Refresh")),
              #Creating the button submit
              column(6, align="center", offset = 3,actionButton("submit", label="Submit",style="margin-top:20px;"))
                   ),
                   tabPanel(title="Load RData",
                            column(2,fileInput("values_input","RData Input",multiple=FALSE, accept=c(".RData")))
                   )
            ),
            
            
            #Down TabBox for Further analysis selection of parameters
            tabBox(id = "antibody_selection",width=12,height = 780,
          ##########CHECK FOR tabsetPanel
                   tabPanel(title="Background/Exploratory Selection",
                            value = 'background_exploratory_selection',
                            column(8,rHandsontableOutput('selection_table')),
                            column(12,align='center',actionButton("confirm","Confirm Background Exploratory Selection",style="margin-top:10px;"))
                            ),
                   tabPanel(title="Infinity Markers selection",
                            value = 'infinity_markers_selection',
                            conditionalPanel(condition = "input.number_plates == '1'",
                            column(12,  fileInput("infinity_markers_1_1",
                                                 "Choose .xl or CSV file for Infinity panel",
                                                 accept=c('.txt', 
                                                          '.csv')),
                                   selectInput("infinity_markers_preset_1_1", "Or Choose a preset Infinity panel:", choices = c('infinity_isotypes_LEGENDSCREEN_plate_1','infinity_isotypes_LEGENDSCREEN_plate_2','infinity_isotypes_LEGENDSCREEN_plate_3')),
                                   
                                   column(8,rHandsontableOutput('infinity_markers_table_1_1'))),


                   
                                   ),
                            conditionalPanel(condition = "input.number_plates == '2'",
                                             column(6,  fileInput("infinity_markers_2_1",
                                                                  "Choose .xl or CSV file for Infinity panel (1)",
                                                                  accept=c('.txt', 
                                                                           '.csv')),
                                                    #Nested Row
                                                    selectInput("infinity_markers_preset_2_1", "Or Choose a preset Infinity panel:", choices = c('infinity_isotypes_LEGENDSCREEN_plate_1','infinity_isotypes_LEGENDSCREEN_plate_2','infinity_isotypes_LEGENDSCREEN_plate_3')),
                                             column(6,rHandsontableOutput('infinity_markers_table_2_1'))),
                                             column(6,  fileInput("infinity_markers_2_2",
                                                                  "Choose .xl or CSV files for Infinity panel (2)",
                                                                  accept=c('.txt', 
                                                                           '.csv')),
                                                    selectInput("infinity_markers_preset_2_2", "Or Choose a preset Infinity panel:", choices = c('infinity_isotypes_LEGENDSCREEN_plate_1','infinity_isotypes_LEGENDSCREEN_plate_2','infinity_isotypes_LEGENDSCREEN_plate_3')),
                                             column(6,rHandsontableOutput('infinity_markers_table_2_2')))
                                             
                                             
                                             
                                             
                                             ),
                            conditionalPanel(condition = "input.number_plates == '3'",
                                             column(4,  fileInput("infinity_markers_3_1",
                                                                  "Choose .xl or CSV file for Infinity panel (1)",
                                                                  accept=c('.txt', 
                                                                           '.csv')),
                                                    #Nested Row
                                                    selectInput("infinity_markers_preset_3_1", "Or Choose a preset Infinity panel:", choices = c('infinity_isotypes_LEGENDSCREEN_plate_1','infinity_isotypes_LEGENDSCREEN_plate_2','infinity_isotypes_LEGENDSCREEN_plate_3'), width=400),
                                                    
                                                    column(6,rHandsontableOutput('infinity_markers_table_3_1'))),
                                             
                                             
                                             
                                             column(4,  fileInput("infinity_markers_3_2",
                                                                  "Choose .xl or CSV file for Infinity panel (2)",
                                                                  accept=c('.txt', 
                                                                           '.csv')),
                                                    selectInput("infinity_markers_preset_3_2", "Or Choose a preset Infinity panel:", choices = c('infinity_isotypes_LEGENDSCREEN_plate_1','infinity_isotypes_LEGENDSCREEN_plate_2','infinity_isotypes_LEGENDSCREEN_plate_3'), width=400),
                                                    
                                                    #Nested Row
                                                    column(6,rHandsontableOutput('infinity_markers_table_3_2'))),
                                             
                                             
                                             column(4,  fileInput("infinity_markers_3_3",
                                                                  "Choose .xl or CSV file for Infinity panel (3)",
                                                                  accept=c('.txt', 
                                                                           '.csv')),
                                                    selectInput("infinity_markers_preset_3_3", "Or Choose a preset Infinity panel:", choices = c('infinity_isotypes_LEGENDSCREEN_plate_1','infinity_isotypes_LEGENDSCREEN_plate_2','infinity_isotypes_LEGENDSCREEN_plate_3'), width=400),
                                                    
                                                    #Nested Row
                                                    column(6,rHandsontableOutput('infinity_markers_table_3_3'))),
                                             
                                             
                                             
                                             
                            ),
                            column(12, align = 'center', actionButton("initialize_empty","Create custom input",
                                                                      
                                                                      style="margin-top:10px;")),
                            column(12,align='center',actionButton("confirm_infinity","Confirm Infinity markers",
                                                                  
                                                                  style="margin-top:10px;"))
                            
                            
                   )
                   )
    ),
    tabItem(tabName = "process",
            tabBox(id = "input",width=12,height = 400,
                   tabPanel(title="infinityFlow pipeline",
                            column(5,sliderInput("input_events_downsampling", "Input Events Downsampling %:",
                                                 min = 0, max = 100,
                                                 value = 50)),
                            column(5,sliderInput("prediction_events_downsampling", "Prediction Events Downsampling %:",
                                                 min = 0, max = 100,
                                                 value = 50)),
                            column(6, align="center", offset = 3,
                                   selectInput("cores_used", "Cores/Threads to be used:",
                                               choices = c(1,2,4,8,16,32)),
                                   
                                   actionButton("begin_pipeline", label="Submit pipeline"),
                                   
                                   
                                   verbatimTextOutput("infinity_flow_dialog"))
                   ),
            ),
            

    ),
    tabItem(tabName = "view",
            tabBox(id = "input",width=12,height = 2000,
                     
                   
                   tabPanel(title="UMAP Annotated",
                            
                            column(5,actionButton("generate_umap", "Generate PDF"),uiOutput("plot_umap"))
                   ),
                   tabPanel(title="UMAP Annotated Background Corrected",
                            
                            column(5,actionButton("generate_umap_corrected", "Generate PDF"),uiOutput("plot_umap_corrected"))
                   )
            ),
            
            
    )
    
  )
)
##### UI ######
ui <- dashboardPage(
  header,
  sidebar,
  body
)










